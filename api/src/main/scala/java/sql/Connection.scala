package java.sql

import java.util
import java.util.Properties
import java.util.concurrent.Executor

trait Connection {
  def clearWarnings(): Unit
  def close(): Unit
  def commit(): Unit
  //  def createArrayOf(typeName: String, elements: Array[Object]):
  //  def createBlob()
  //  def createClob()
  //  def createNClob()
  //  def createSQLXML()
  def createStatement(): Statement
  def createStatement(resultSetType: Int, resultSetConcurrency: Int): Statement
  def createStatement(resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): Statement
  //  def createStruct(typeName: String, attributes: Array[Object])
  def getAutoCommit(): Boolean
  def getCatalog(): String
  def getClientInfo(): Properties
  def getClientInfo(name: String): String
  def getHoldability(): Int
  def getMetaData(): DatabaseMetaData
  def getNetworkTimeout(): Int
  def getSchema(): String
  def getTransactionIsolation(): Int
  def getTypeMap(): java.util.Map[String,Class[_]]
  def getWarnings(): SQLWarning
  def isClosed(): Boolean
  def isReadOnly(): Boolean
  def isValid(timeout: Int): Boolean
  def nativeSQL(sql: String): String
  def prepareCall(sql: String): CallableStatement
  def prepareCall(sql: String, resultSetType: Int, resultSetConcurrency: Int): CallableStatement
  def prepareCall(sql: String, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): CallableStatement
  def prepareStatement(sql: String): PreparedStatement
  def prepareStatement(sql: String, autoGeneratedKeys: Int): PreparedStatement
  //  def prepareStatement(sql: String, columnIndexes: Array[Int]): PreparedStatement
  def prepareStatement(sql: String, resultSetType: Int, resultSetConcurrency: Int): PreparedStatement
  def prepareStatement(sql: String, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): PreparedStatement
  //  def prepareStatement(sql: String, columnNames: Array[String]): PreparedStatement
  //  def releaseSavepoint()
  def rollback(): Unit
  def setAutoCommit(autoCommit: Boolean): Unit
  def setCatalog(catalog: String): Unit
  def setClientInfo(properties: Properties): Unit
  def setClientInfo(name: String, value: String): Unit
  def setHoldability(holdability: Int): Unit
  //  def setNetworkTimeout()
  def setReadOnly(readOnly: Boolean): Unit
  //  def setSavepoint()
  //  def setSavepoint(name: String)
  def setSchema(name: String): Unit
  def setTransactionIsolation(level: Int): Unit
  def setTypeMap(map: java.util.Map[String,Class[_]]): Unit
}

object Connection {

  abstract class AbstractConnection extends Connection {
    override def commit(): Unit = ???

    override def getHoldability: Int = ???

    override def setCatalog(catalog: String): Unit = ???

    override def setHoldability(holdability: Int): Unit = ???

    override def prepareStatement(sql: String): PreparedStatement = ???

    override def prepareStatement(sql: String, resultSetType: Int, resultSetConcurrency: Int): PreparedStatement = ???

    override def prepareStatement(sql: String, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): PreparedStatement = ???

    override def prepareStatement(sql: String, autoGeneratedKeys: Int): PreparedStatement = ???

    //    override def createClob(): Clob = ???
    override def setSchema(schema: String): Unit = ???

    override def setClientInfo(name: String, value: String): Unit = ???

    override def setClientInfo(properties: Properties): Unit = ???

    //    override def createSQLXML(): SQLXML = ???
    override def getCatalog: String = ???

    //    override def createBlob(): Blob = ???
    override def createStatement(): Statement = ???

    override def createStatement(resultSetType: Int, resultSetConcurrency: Int): Statement = ???

    override def createStatement(resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): Statement = ???

    //    override def abort(executor: Executor): Unit = ???
    override def setAutoCommit(autoCommit: Boolean): Unit = ???

    override def getMetaData: DatabaseMetaData = ???

    override def setReadOnly(readOnly: Boolean): Unit = ???

    override def prepareCall(sql: String): CallableStatement = ???

    override def prepareCall(sql: String, resultSetType: Int, resultSetConcurrency: Int): CallableStatement = ???

    override def prepareCall(sql: String, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): CallableStatement = ???

    override def setTransactionIsolation(level: Int): Unit = ???

    override def getWarnings: SQLWarning = ???

    //    override def releaseSavepoint(savepoint: Savepoint): Unit = ???
    override def nativeSQL(sql: String): String = ???

    override def isReadOnly: Boolean = ???

    //    override def createArrayOf(typeName: String, elements: Array[AnyRef]): Array = ???
    //    override def setSavepoint(): Savepoint = ???
    //    override def setSavepoint(name: String): Savepoint = ???
    override def close(): Unit = ???

    //    override def createNClob(): NClob = ???
    override def rollback(): Unit = ???

    //    override def rollback(savepoint: Savepoint): Unit = ???
    //    override def setNetworkTimeout(executor: Executor, milliseconds: Int): Unit = ???
    override def setTypeMap(map: util.Map[String, Class[_]]): Unit = ???

    override def isValid(timeout: Int): Boolean = ???

    override def getAutoCommit: Boolean = ???

    override def clearWarnings(): Unit = ???

    override def getSchema: String = ???

    override def getNetworkTimeout: Int = ???

    override def isClosed: Boolean = ???

    override def getTransactionIsolation: Int = ???

    //    override def createStruct(typeName: String, attributes: Array[AnyRef]): Struct = ???
    override def getClientInfo(name: String): String = ???

    override def getClientInfo: Properties = ???

    override def getTypeMap: util.Map[String, Class[_]] = ???

    //    override def unwrap[T](iface: Class[T]): T = ???
    //    override def isWrapperFor(iface: Class[_]): Boolean = ???
  }

}
